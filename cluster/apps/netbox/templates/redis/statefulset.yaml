apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: {{ .Release.Namespace }}
  annotations:
    keel.sh/policy: major
    keel.sh/approvals: "1"
    keel.sh/trigger: poll
    keel.sh/pollSchedule: '@every 12h'
spec:
  serviceName: redis
  replicas: 1
  selector:
    matchLabels:
      app: redis
  # volumeClaimTemplates:
  # - metadata:
  #       name: data
  #   spec:
  #       accessModes: ["ReadWriteOnce"]
  #       resources:
  #           requests:
  #               storage: 20Gi
  # - metadata:
  #       name: conf
  #   spec:
  #       accessModes: ["ReadWriteOnce"]
  #       resources:
  #           requests:
  #               storage: 20Gi
  template:
    metadata:
      labels:
        app: redis
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: In
                    values: 
                      - kworker02
              topologyKey: "kubernetes.io/hostname"
      # volumes:
      #   - name: config-map
      #     configMap:
      #       name: redis
      containers:
      - name: redis
        image: "{{ .Values.redis.image.repository }}:{{ .Values.redis.image.tag }}"
        command: ["redis-server"]
        args: ["/etc/redis/redis.conf"]
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        ports:
        - name: redis
          containerPort: 6379
        # volumeMounts:
        # - name: data
        #   mountPath: /data
        # - name: conf
        #   mountPath: /etc/redis
      # initContainers:
      # - name: init-redis
      #   image: redis
      #   command:
      #   - bash
      #   - "-c"
      #   - |
      #     set -ex
      #     # Generate mysql server-id from pod ordinal index.
      #     [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
      #     ordinal=${BASH_REMATCH[1]}
      #     # Copy appropriate conf.d files from config-map to emptyDir.
      #     if [[ $ordinal -eq 0 ]]; then
      #       cp /mnt/config-map/master.conf /etc/redis/redis.conf
      #     else
      #       cp /mnt/config-map/slave.conf /etc/redis/redis.conf
      #     fi
      #   volumeMounts:
      #   - name: conf
      #     mountPath: /etc/redis
      #   - name: config-map
      #     mountPath: /mnt/config-map
