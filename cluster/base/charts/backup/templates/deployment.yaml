{{- if and .Values.claims .Values.claimName }}
  {{- fail "Cannot define both .Values.claims and .Values.claimName" }}
{{- end }}
{{- $backup_root_dir := printf "/backup/%s" .Release.Namespace }}
{{- $backup_dir := $backup_root_dir }}
{{- if .Values.subdir }}
  {{- $backup_dir = printf "%s/%s" $backup_root_dir .Values.subdir }}
{{- end -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ default "backup" .Values.deploymentName }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ default "backup" .Values.deploymentName }}
  template:
    metadata:
      labels:
        app: {{ default "backup" .Values.deploymentName }}
    spec:
      {{- if or .Values.claimName .Values.claims }}
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                {{- if not .Values.affinity }}
                  {{- fail ".Values.affinity is required for backing up pods" }}
                {{- end }}
                  - key: {{ required "a valid .Values.affinity.key entry required!" .Values.affinity.key }}
                    operator: {{ default "In" .Values.affinity.operator }}
                    values: {{ required "a valid .Values.affinity.values list required!" .Values.affinity.values }}
              topologyKey: "kubernetes.io/hostname"
      {{- end }}
      {{- if .Values.claims }}
      volumes:
      {{- range .Values.claims }}
        - name: "backup-vol-{{ required "a valid .Values.claims[].name entry required!" .name }}"
          persistentVolumeClaim:
            claimName: {{ .name }}
      {{- end }}
      {{- end }}
      {{- if .Values.claimName }}
      volumes:
        - name: backup-vol
          persistentVolumeClaim:
            claimName: {{ .Values.claimName }}
      {{- end }}
      hostname: backup
      containers:
        - name: backup
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
          env:
            - name: TZ
              value: {{ default "America/New_York" .Values.timezone }}
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: backup-secret
                  key: s3User
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: backup-secret
                  key: s3Password
            - name: RESTIC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: backup-secret
                  key: resticPassword
            - name: RESTIC_REPOSITORY
              value: "{{ .Values.restic.repository }}"
            - name: BACKUP_DIRECTORY
              value: "{{ $backup_dir }}"
            - name: BACKUP_TYPES
              value: {{ default "volume" (join "," .Values.backupTypes) }}
            {{- if has "postgresql" .Values.backupTypes }}
            {{- if not .Values.postgresql }}
              {{- fail "If backupTypes contains postgresql, .Values.postgresql struct must be set!" }}
            {{- end }}
            - name: PG_HOST
              value: {{ required "If backupTypes contains postgresql, .Values.postgresql.host must be set!" .Values.postgresql.host }}
            - name: PG_DATABASE
              value: {{ required "If backupTypes contains postgresql, .Values.postgresql.database must be set!" .Values.postgresql.database }}
            - name: PG_PORT
              value: "{{ .Values.postgresql.pg_port }}"
            - name: PG_USER
              value: {{ required "If backupTypes contains postgresql, .Values.postgresql.user must be set!" .Values.postgresql.user }}
            - name: PG_PASSWORD
              value: {{ required "If backupTypes contains postgresql, .Values.postgresql.password must be set!" .Values.postgresql.password }}
            - name: PG_BACKUP_FILE
              value: {{ required "If backupTypes contains postgresql, .Values.postgresql.backupFile must be set!" .Values.postgresql.backupFile }}
            {{- end }}
          {{- if .Values.claims }}
          volumeMounts:
          {{- range .Values.claims }}
            - mountPath: {{ quote (printf "%s/%s" $backup_root_dir (required "a valid .Values.claims[].subPath entry required!" .subPath)) }}
              name: "backup-vol-{{ .name }}"
          {{- end }}
          {{- end }}
          {{- if .Values.claimName }}
          volumeMounts:
            - mountPath: {{ quote $backup_root_dir }}
              name: backup-vol
          {{- end }}
