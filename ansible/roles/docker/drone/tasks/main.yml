---
- name: create application container
  community.docker.docker_container:
    name: "drone"
    image: "drone/drone:latest"
    pull: "{{ container_pull }}"
    hostname: "drone"
    env:
      TZ: "{{ default_timezone }}"
      DRONE_GITEA_CLIENT_ID: "{{ secret.services.drone.gitea_client_id }}"
      DRONE_GITEA_CLIENT_SECRET: "{{ secret.services.drone.gitea_client_secret }}"
      DRONE_GITEA_SERVER: "{{ secret.services.drone.gitea_server }}"
      DRONE_RPC_SECRET: "{{ secret.services.drone.drone_rpc_secret }}"
      DRONE_SERVER_HOST: "{{ secret.services.drone.drone_server_host }}"
      DRONE_SERVER_PROTO: "{{ secret.services.drone.drone_server_proto }}"
      DRONE_RUNNER_NETWORKS: "{{ secret.docker.network.container }}"
    volumes:
      - "{{ appdata_dir }}/drone:/config"
    container_default_behavior: "{{ container_default_behavior }}"
    network_mode: "{{ secret.docker.network.container }}"
    restart_policy: unless-stopped
    networks:
      - name: "{{ secret.docker.network.container }}"
        ipv4_address: "{{ secret.services.drone.ip }}"
    networks_cli_compatible: "{{ container_networks_cli_compatible }}"
    state: "{{ container_state }}"
  notify:
    - deep prune docker
  tags:
    - drone

- name: create drone runner
  community.docker.docker_container:
    name: drone-runner
    image: "drone/drone-runner-docker:latest"
    pull: "{{ container_pull }}"
    hostname: drone-runner
    env:
      TZ: "{{ default_timezone }}"
      DRONE_RPC_HOST: "{{ secret.services.drone.drone_server_host }}"
      DRONE_RPC_PROTO: "{{ secret.services.drone.drone_server_proto }}"
      DRONE_RPC_SECRET: "{{ secret.services.drone.drone_rpc_secret }}"
      DRONE_RUNNER_NETWORKS: "{{ secret.docker.network.container }}"
      DRONE_RUNNER_CAPACITY: "2"
      DRONE_RUNNER_NAME: drone-runner
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    container_default_behavior: "{{ container_default_behavior }}"
    network_mode: "{{ secret.docker.network.container }}"
    restart_policy: unless-stopped
    networks:
      - name: "{{ secret.docker.network.container }}"
        ipv4_address: "{{ secret.services.drone_runner.ip }}"
    networks_cli_compatible: "{{ container_networks_cli_compatible }}"
    state: "{{ container_state }}"
  notify:
    - deep prune docker
  tags:
    - drone
    - docker_update
