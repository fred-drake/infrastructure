# - import_tasks: volume.yml

- name: "create application container - {{ container.name }}"
  community.docker.docker_container:
    name: "{{ container.name }}"
    image: "{{ container.repository }}:{{ container.tag }}"
    pull: "{{ container.pull_policy | default(true) }}"
    ports: "{{ container.ports | default(omit) }}"
    hostname: "{{ container.hostname | default(container.name) }}"
    env: "{{ default_env | combine(container.env | default({})) }}"
    mounts: "{{ container.mounts | default([]) }}"
    volumes: "{{ container.volumes | default([]) }}"
    container_default_behavior: "{{ container.default_behavior | default('compatibility') }}"
    network_mode: "{{ container.network | default(secret.docker.network.container) }}"
    restart_policy: "{{ container.restart_policy | default('unless-stopped') }}"
    runtime: "{{ container.runtime | default(omit) }}"
    networks:
      - name: "{{ container.network | default(secret.docker.network.container) }}"
        ipv4_address: "{{ container.ip }}"
    networks_cli_compatible: "{{ container.networks_cli_compatible | default(true) }}"
    state: started
  notify:
    - deep prune docker
  tags:
    - docker_container
  when: container.ip is defined

- name: "create application container - {{ container.name }}"
  community.docker.docker_container:
    name: "{{ container.name }}"
    image: "{{ container.repository }}:{{ container.tag }}"
    pull: "{{ container.pull_policy | default(true) }}"
    ports: "{{ container.ports | default(omit) }}"
    hostname: "{{ container.hostname | default(container.name) }}"
    env: "{{ default_env | combine(container.env | default({})) }}"
    mounts: "{{ container.mounts | default([]) }}"
    volumes: "{{ container.volumes | default([]) }}"
    container_default_behavior: "{{ container.default_behavior | default('compatibility') }}"
    network_mode: "{{ container.network | default(secret.docker.network.container) }}"
    restart_policy: "{{ container.restart_policy | default('unless-stopped') }}"
    runtime: "{{ container.runtime | default(omit) }}"
    networks: "{{ container.networks }}"
    networks_cli_compatible: "{{ container.networks_cli_compatible | default(true) }}"
    state: started
  notify:
    - deep prune docker
  tags:
    - docker_container
  when: container.ip is not defined and container.networks is defined

- name: "create application container - {{ container.name }}"
  community.docker.docker_container:
    name: "{{ container.name }}"
    image: "{{ container.repository }}:{{ container.tag }}"
    pull: "{{ container.pull_policy | default(true) }}"
    ports: "{{ container.ports | default(omit) }}"
    hostname: "{{ container.hostname | default(container.name) }}"
    env: "{{ default_env | combine(container.env | default({})) }}"
    mounts: "{{ container.mounts | default([]) }}"
    volumes: "{{ container.volumes | default([]) }}"
    container_default_behavior: "{{ container.default_behavior | default('compatibility') }}"
    network_mode: "{{ container.network | default(secret.docker.network.container) }}"
    restart_policy: "{{ container.restart_policy | default('unless-stopped') }}"
    runtime: "{{ container.runtime | default(omit) }}"
    device_requests: "{{ container.device_requests | default(omit) }}"
    networks_cli_compatible: "{{ container.networks_cli_compatible | default(true) }}"
    state: started
  notify:
    - deep prune docker
  tags:
    - docker_container
  when: container.ip is not defined and container.networks is not defined
