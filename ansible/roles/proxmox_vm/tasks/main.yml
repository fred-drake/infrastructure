# - name: Check for existing VM {{ proxmox_vm.name }}
#   ansible.builtin.shell:
#     cmd: "qm list | grep -E '^\\s+{{ proxmox_vm.vmid }}\\s+' | wc -l"
#   register: vm_exists
#   changed_when: false
#   delegate_to: "{{ proxmox_vm.host }}"
#   become: false

- name: Fetch cluster resources
  ansible.builtin.command:
    cmd: "pvesh get /cluster/resources --type vm --output-format json"
  register: cluster_content
  changed_when: false
  delegate_to: "{{ proxmox_vm.host }}"
  become: false

# - name: From cluster content, determine if either VM ID or name is already in use
#   ansible.builtin.set_fact:
#     vm_exists: "{{ cluster_content.stdout | to_json | json_query('[*].id') }}"
#   changed_when: false

- name: Install jq on hypervisor
  ansible.builtin.apt:
    name:
      - jq
    update_cache: true
  delegate_to: "{{ proxmox_vm.host }}"
  become: false

- name: From cluster content, determine if either VM ID or name is already in use
  ansible.builtin.shell:
    cmd: >
      set -o pipefail && pvesh get /cluster/resources --type vm --output-format json
      | jq 'any(.[]; .id == "qemu/{{ proxmox_vm.vmid }}")'
    executable: /bin/bash
  register: vm_exists
  delegate_to: "{{ proxmox_vm.host }}"
  become: false
  changed_when: false

- name: Create VM {{ proxmox_vm.name }}
  ansible.builtin.include_role:
    name: proxmox_vm
    tasks_from: create_vm
    apply:
      delegate_to: "{{ proxmox_vm.host }}"
      become: false
  when: vm_exists.stdout == "false"

- name: Wait for cloud init to complete.
  ansible.builtin.command:
    cmd: cloud-init status --wait
  changed_when: true
  async: 600
  poll: 15
  when: >
    vm_exists.stdout == "false"
    and proxmox_vm.cloud_init is defined
    and proxmox_vm.cloud_init

- name: Gather facts now that we know there is a VM available
  ansible.builtin.gather_facts:

- name: Install qemu guest agent via apt
  ansible.builtin.apt:
    name:
      - qemu-guest-agent
    update_cache: true
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Install qemu guest agent via yum
  ansible.builtin.yum:
    name:
      - qemu-guest-agent
    state: present
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Ensure agent is started
  ansible.builtin.systemd:
    name: qemu-guest-agent
    state: started
  when: >
    ansible_distribution == 'Debian'
    or ansible_distribution == 'Ubuntu'
    or ansible_distribution == 'CentOS'
    or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Check if cloud init drive is still attached
  ansible.builtin.command:
    cmd: "qm config {{ proxmox_vm.vmid }}"
  register: qm_config
  changed_when: false
  delegate_to: "{{ proxmox_vm.host }}"
  become: false

- name: Remove cloud init drive if it exists
  ansible.builtin.command:
    cmd: "qm disk unlink {{ proxmox_vm.vmid }} --idlist ide2"
  when: "qm_config.stdout.find('ide2: ') != -1"
  changed_when: true
  delegate_to: "{{ proxmox_vm.host }}"
  become: false

- name: Add VM to HA
  ansible.builtin.command:
    cmd: "ha-manager add vm:{{ proxmox_vm.vmid }} --group {{ proxmox_vm.ha.group }}"
  when: proxmox_vm.ha is defined and proxmox_vm.ha.group is defined
  delegate_to: "{{ proxmox_vm.host }}"
  become: false
  changed_when: true
