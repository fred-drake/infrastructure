---
apiVersion: v1
kind: Namespace
metadata:
  name: "{{ secret.services.brynn_web.name }}"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: "{{ secret.services.brynn_web.name }}-data"
  namespace: "{{ secret.services.brynn_web.namespace }}"
spec:
  capacity:
    storage: 4Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: longhorn
  csi:
    driver: driver.longhorn.io
    fsType: ext4
    volumeAttributes:
      numberOfReplicas: '3'
      staleReplicaTimeout: '2880'
    volumeHandle: "{{ secret.services.brynn_web.name }}-data-2"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: "{{ secret.services.brynn_web.name }}-data"
  namespace: "{{ secret.services.brynn_web.namespace }}"
spec:
  storageClassName: longhorn
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 4Gi
  volumeName: "{{ secret.services.brynn_web.name }}-data"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ secret.services.brynn_web.name }}"
  namespace: "{{ secret.services.brynn_web.namespace }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{ secret.services.brynn_web.name }}"
  template:
    metadata:
      labels:
        app: "{{ secret.services.brynn_web.name }}"
    spec:
      volumes:
        - name: "{{ secret.services.brynn_web.name }}-data"
          persistentVolumeClaim:
            claimName: "{{ secret.services.brynn_web.name }}-data"
      containers:
        - name: "{{ secret.services.brynn_web.name }}"
          image: nginx
          imagePullPolicy: Always
          env:
            - name: TZ
              value: "{{ default_timezone }}"
          volumeMounts:
            - name: "{{ secret.services.brynn_web.name }}-data"
              mountPath: /usr/share/nginx/html
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ secret.services.brynn_web.name }}"
  namespace: "{{ secret.services.brynn_web.namespace }}"
spec:
  selector:
    app: "{{ secret.services.brynn_web.name }}"
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "{{ secret.services.brynn_web.name }}"
  namespace: "{{ secret.services.brynn_web.name }}"
spec:
  rules:
  - host: {{ secret.services.brynn_web.host }}
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: "{{ secret.services.brynn_web.name }}"
            port:
              number: 80
