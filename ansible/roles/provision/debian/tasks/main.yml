---
- name: Set authorized keys
  become: false
  ansible.posix.authorized_key:
    user: "{{ ansible_user }}"
    state: present
    key: "{{ lookup('file', '{{ item }}') }}"
  with_fileglob:
    - "public_keys/*"

- name: Make sure we have a 'wheel' group
  ansible.builtin.group:
    name: wheel
    state: present

- name: Allow 'wheel' group to have passwordless sudo
  ansible.builtin.lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^%wheel'
    line: '%wheel ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'

- name: Add sudoers users to wheel group
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups:
      - wheel
    append: true
    state: present
    createhome: true

# - name: Set up authorized keys for the deployer user
#   authorized_key:
#     user: "{{ ansible_user }}"
#     key: "{{ item }}"
#   loop: "{{ public_keys }}"

- name: Disable automatic daily upgrade
  ansible.builtin.systemd:
    name: apt-daily-upgrade.timer
    enabled: false
    state: stopped
    daemon_reload: true

- name: Set hostname
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"

- name: Set timezone
  community.general.timezone:
    name: "{{ default_timezone }}"

- name: Install initial libraries
  ansible.builtin.apt:
    name:
      - net-tools
      - python3-pip
      - neofetch
      - figlet
      - jq
      - vlan
      - zsh
      - fontconfig
      - git
    state: present
    update_cache: true

- name: Install glances
  ansible.builtin.pip:
    name: "glances[docker]"
  tags:
    - update

- name: Set terminal setup user to ansible user
  ansible.builtin.set_fact:
    terminal_root_user: false

- import_tasks: terminal.yml

- name: Set terminal setup user to root user
  ansible.builtin.set_fact:
    terminal_root_user: true

- import_tasks: terminal.yml

- name: Install cifs apt dependencies
  ansible.builtin.apt:
    name:
      - smbclient
      - cifs-utils
      - nfs-common
  when: "'cifs' in group_names"

- name: Set credentials file
  ansible.builtin.template:
    src: cifs_credentials.j2
    dest: /etc/cifs_credentials
    mode: '0600'
  when: "'cifs' in group_names"
