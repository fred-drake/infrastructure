---
- name: Install libraries
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - python3
      - python3-pip
      - net-tools
      - smbclient
      - cifs-utils
    state: present
    update_cache: true

- name: Install pip libraries
  ansible.builtin.pip:
    name:
      - docker
      - docker-compose

- name: Add GPG key
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add docker repository to apt
  ansible.builtin.apt_repository:
    repo: deb https://download.docker.com/linux/ubuntu bionic stable
    state: present

- name: Install docker
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: present
    update_cache: true

- name: Start docker service
  ansible.builtin.service:
    name: docker
    state: started
    enabled: true

- name: Wipe containers
  ansible.builtin.shell: docker stop $(docker ps -aq) && docker rm $(docker ps -aq)
  when: "True"
  tags:
    - never
    - rebuild_containers
    - rebuild_all

- name: Wipe images, volumes and networks
  community.docker.docker_prune:
    images: true
    images_filters:
      dangling: false
    containers: true
    volumes: true
    builder_cache: true
  tags:
    - never
    - rebuild_all

- name: Setup admin network
  community.docker.docker_network:
    name: "{{ secret.docker.network.admin }}"
    driver: "macvlan"
    internal: false
    driver_options:
      parent: "{{ interface_208 }}"
    ipam_config:
      - gateway: "{{ gateway_208 }}"
        subnet: "{{ netmask_208 }}"
  when: interface_208 is defined
  # tags: docker_network

- name: Setup container network
  community.docker.docker_network:
    name: "{{ secret.docker.network.container }}"
    driver: "macvlan"
    internal: false
    driver_options:
      parent: "{{ interface_50 }}"
    ipam_config:
      - gateway: "{{ gateway_50 }}"
        subnet: "{{ netmask_50 }}"
  when: interface_50 is defined
  # tags: docker_network

- name: Setup iot network
  community.docker.docker_network:
    name: "{{ secret.docker.network.iot }}"
    driver: "macvlan"
    internal: false
    driver_options:
      parent: "{{ interface_40 }}"
    ipam_config:
      - gateway: "{{ gateway_40 }}"
        subnet: "{{ netmask_40 }}"
  when: interface_40 is defined
  # tags: docker_network

- name: Setup workstation network
  community.docker.docker_network:
    name: "{{ secret.docker.network.workstation }}"
    driver: "macvlan"
    internal: false
    driver_options:
      parent: "{{ interface_30 }}"
    ipam_config:
      - gateway: "{{ gateway_30 }}"
        subnet: "{{ netmask_30 }}"
  when: interface_30 is defined
  tags: docker_network

- name: Set DNS variables for services containers
  ansible.builtin.set_fact:
    dns1: "{{ secret.pihole.pihole1.address }}"
    dns2: "{{ secret.pihole.pihole2.address }}"
  when: "'critical_docker_services' not in group_names"

- name: Set DNS variables for critical services containers
  ansible.builtin.set_fact:
    dns1: "8.8.8.8"
    dns2: "8.8.4.4"
  when: "'critical_docker_services' in group_names"

- name: Set docker configuration
  ansible.builtin.template:
    src: "docker_config.j2"
    dest: "/etc/default/docker"
    mode: "0644"
  notify:
    - Restart docker

- name: Add a docker group
  ansible.builtin.group:
    name: docker
    state: present

- name: Add ansible user to docker group
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: docker
    append: true

- name: Install Loki plugin
  community.docker.docker_plugin:
    plugin_name: grafana/loki-docker-driver:latest
    alias: loki
    state: enable
  when: ansible_architecture != 'aarch64'

- name: Install docker daemon
  ansible.builtin.template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    mode: '0644'
  notify: Restart docker
  when: ansible_architecture != 'aarch64'
