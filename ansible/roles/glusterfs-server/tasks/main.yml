- name: Get gluster facts
  ansible.builtin.include_role:
    name: glusterfs-server
    tasks_from: node_common

- name: Add peer to pool list
  delegate_to: "{{ acting_node }}"
  ansible.builtin.command:
    cmd: "gluster --mode=script peer probe {{ inventory_hostname }}"
  changed_when: true
  # when: gluster_initial is not defined or not gluster_initial

- name: Pause 10 seconds for pool to sync
  ansible.builtin.pause:
    seconds: 10

- name: Add brick
  delegate_to: "{{ acting_node }}"
  gluster.gluster.gluster_volume:
    state: present
    name: vol01
    replicas: 3
    bricks: /export/brick0/vol01
    cluster:
      - nuc4.internal.freddrake.com
      - nuc5.internal.freddrake.com
      - nuc6.internal.freddrake.com
    force: true
  # when: num_bricks.stdout | int < 3

- name: Get gluster facts
  ansible.builtin.include_role:
    name: glusterfs-server
    tasks_from: node_common

- name: Fail if we don't have all nodes
  ansible.builtin.fail:
    msg: Not all nodes are connected.  Check gluster pool list
  when: num_peers.stdout | int < 3

- name: Gluster sync
  delegate_to: "{{ acting_node }}"
  ansible.builtin.command:
    cmd: gluster --mode=script volume heal vol01 full
  changed_when: true

- name: Copy over xattr clear script
  ansible.builtin.copy:
    src: gluster-xattr-clear.sh
    dest: "/home/{{ ansible_user }}"
    mode: '0755'

# - name: Update UUID
#   ansible.builtin.lineinfile:
#     path: /var/lib/glusterd/glusterd.info
#     regexp: "^UUID="
#     line: "UUID={{ gluster_uuid }}"
#   notify: Restart glusterd
#   when: gluster_uuid is defined

# - name: Flush handlers
#   ansible.builtin.meta: flush_handlers

# - name: Create a trusted storage pool
#   ansible.builtin.gluster_peer:
#     state: present
#     nodes: "{{ groups['glusterfs_server'] }}"
#   run_once: true

# - name: Check if volume already exists
#   ansible.builtin.command: gluster volume info vol01
#   ignore_errors: true
#   register: volume_status
#   changed_when: false

# - name: Create gluster volume
#   ansible.builtin.gluster_volume:
#     state: present
#     name: vol01
#     brick: /export/brick0/vol01
#     replicas: 3
#     cluster: "{{ groups['glusterfs_server'] }}"
#   run_once: true
#   when: volume_status.rc != 0

# - name: Get volume info
#   ansible.builtin.command: gluster volume info
#   register: volume_info
#   run_once: true
#   changed_when: false
# - name: Show volume info
#   ansible.builtin.debug:
#     msg: "{{ volume_info.stdout_lines }}"
#   run_once: true

## Nuke volume and storage pool
# - name: warning
#   pause:
#     prompt: "WARNING: This will destroy your volume.  Be sure this is what you want!!"
#     seconds: 10
#   tags:
#     - never
#     - nuke
# - name: delete gluster volume
#   gluster_volume:
#     state: absent
#     name: vol01
#   run_once: true
#   tags:
#     - never
#     - nuke

# - name: "remove trusted storage pool"
#   gluster_peer:
#     state: absent
#     nodes: "{{ groups['glusterfs_server'][1:] }}"
#   run_once: true
#   tags:
#     - never
#     - nuke
# - name: remove vol01
#   file:
#     path: /export/brick0/vol01
#     state: absent
#   tags:
#     - never
#     - nuke
