# Force to use this specific interpretor
ansible_python_interpreter: /usr/bin/python3

# The timezone used on servers and docker containers
default_timezone: America/New_York

# Root path for netboot assets
netboot_assets_path: /Volumes/netboot

# kubernetes configuration
k8s:
  cert_manager: # manages automatic https certificates
    cluster_issuer: letsencrypt-production
  initial_master_node_hostname: rp1
  k3s: # k3s install version
    version: v1.24.2+k3s2
  kubegres: # scalable postgres for kubernetes
    version: 1.9
  resources: # kubernetes resources
    cpu:
      request:
        default: 100m
    memory:
      request:
        default: 128Mi
  traefik: # kubernetes ingress
    address: "192.168.50.240"
  metallb: # kubernetes load balancer
    range: 192.168.50.225-192.168.50.250
  keel:
    default_policy: minor
    default_approvals: "1"
    default_trigger: "poll"
    default_poll_schedule: "@every 1h"

talos:
  cluster_name: main
  vip: 192.168.50.4
  installer_version: v1.0.2
  k8s_version: v1.23.5
  pod_subnet: 10.40.0.0/16
  service_subnet: 10.41.0.0/16

swarm_services:
  bitwarden:
    name: bitwarden
    backup: true
    containers:
      - repository: vaultwarden/server
        tag: latest
        web_port: 80
        env:
          SERVER_ADMIN_EMAIL: "{{ secret.services.bitwarden.server_admin_email }}"
          SIGNUPS_ALLOWED: "false"
          INVITATIONS_ALLOWED: "true"
          WEBSOCKET_ENABLED: "true"
          ROCKET_PORT: "80"
        bind_mounts:
          - source: data
            target: /data
  ddns:
    name: ddns
    containers:
      - repository: ghcr.io/akarys42/cloudflare-ddns-docker
        tag: latest
        env:
          TZ: "{{ default_timezone }}"
          CF_DDNS_TOKEN: "{{ secret.services.ddns.token }}"
          CF_DDNS_DOMAINS: "{{ secret.services.ddns.domains }}"
  git_hash_updater:
    name: git-hash_updater
    containers:
      - repository: fdrake/git-hash-updater
        tag: latest
        env:
          TZ: "{{ default_timezone }}"
          GIT_USER_EMAIL: "{{ secret.services.git_hash_updater.git_user_email }}"
          GIT_USER_NAME: "{{ secret.services.git_hash_updater.git_user_name }}"
        bind_mounts:
          - source: data
            target: /data
  homeassistant:
    name: homeassistant
    backup: true
    containers:
      - repository: ghcr.io/linuxserver/homeassistant
        web_port: 8123
        tag: latest
        env:
          TZ: "{{ default_timezone }}"
          PUID: "99"
          PGID: "100"
          UMASK: "022"
        bind_mounts:
          - source: config
            target: /config
        publish:
          - published_port: 42843
            target_port: 42843
            mode: host
  loki:
    name: loki
    init_role: loki
    containers:
      - repository: grafana/loki
        tag: latest
        web_port: 3100
        bind_mounts:
          - source: config
            target: /etc/loki
          - source: data
            target: /data
          - source: wal
            target: /wal
  netbox:
    name: netbox
    backup: true
    backup_env:
      BACKUP_TYPES: postgresql
      PG_HOST: netbox-postgres
      PG_DATABASE: "{{ secret.services.netbox.postgres.database }}"
      PG_PORT: "{{ secret.services.netbox.postgres.port }}"
      PG_USER: "{{ secret.services.netbox.postgres.user }}"
      PG_PASSWORD: "{{ secret.services.netbox.postgres.password }}"
      PG_BACKUP_FILE: "netbox.sql"
    containers:
      - name: netbox-postgres
        repository: postgres
        tag: "12"
        env:
          POSTGRES_USER: "{{ secret.services.netbox.postgres.user }}"
          POSTGRES_PASSWORD: "{{ secret.services.netbox.postgres.password }}"
          POSTGRES_DB: "{{ secret.services.netbox.postgres.database }}"
        bind_mounts:
          - source: data
            target: /var/lib/postgresql/data
      - name: netbox-redis
        repository: redis
        tag: latest
      - name: netbox
        repository: linuxserver/netbox
        tag: "3.1.11"
        web_port: 8000
        env:
          PUID: "99"
          PGID: "100"
          SUPERUSER_EMAIL: "{{ secret.services.netbox.superuser.email }}"
          SUPERUSER_PASSWORD: "{{ secret.services.netbox.superuser.password }}"
          ALLOWED_HOST: "{{ secret.services.netbox.allowed_host }}"
          DB_NAME: "{{ secret.services.netbox.postgres.database }}"
          DB_USER: "{{ secret.services.netbox.postgres.user }}"
          DB_PASSWORD: "{{ secret.services.netbox.postgres.password }}"
          DB_HOST: "netbox-postgres"
          DB_PORT: "{{ secret.services.netbox.postgres.port }}"
          REDIS_HOST: "netbox-redis"
          REDIS_PORT: "{{ secret.services.netbox.redis.port }}"
        bind_mounts:
          - source: config
            target: /config
  nginx_static:
    name: nginx-static
    containers:
      - web_port: 80
        web_hostname: external-static
        repository: linuxserver/nginx
        tag: latest
        bind_mounts:
          - source: config
            target: /config
        nfs_mounts:
          - name: nginx_external
            target: /www
  node_red:
    name: node-red
    backup: true
    containers:
      - name: node-red-postgres
        repository: postgres
        tag: 14.1
        bind_mounts:
          - source: postgres
            target: /var/lib/postgresql/data
        env:
          POSTGRES_USER: "{{ secret.services.node_red.postgres.user }}"
          POSTGRES_PASSWORD: "{{ secret.services.node_red.postgres.password }}"
          POSTGRES_DB: "{{ secret.services.node_red.postgres.database }}"
      - name: node-red
        web_port: 1880
        web_hostname: nodered
        repository: nodered/node-red
        tag: 2.2.3
        bind_mounts:
          - source: data
            target: /data
        nfs_mounts:
          - name: camera_videos
            target: /camera_videos
        env:
          TZ: "{{ default_timezone }}"
          NODE_RED_ENABLE_SAFE_MODE: "false"
        publish:
          - published_port: 3456
            target_port: 3456
            mode: host
  prometheus:
    name: prometheus
    containers:
      - web_port: 9090
        repository: prom/prometheus
        tag: latest
        bind_mounts:
          - source: config
            target: /etc/prometheus
  promtail:
    name: promtail
    init_role: promtail
    containers:
      - repository: grafana/promtail
        tag: latest
        mode: global
        constraints:
          # Force on all nodes, both workers and managers.
          - node.role != foo
        command: >
            /bin/sh -c
            "export HOSTNAME=`/bin/cat /etc/hostname` &&
            /usr/bin/promtail --client.external-labels=hostname=$HOSTNAME --config.file=/etc/promtail/config.yml"
        bind_mounts:
          - source: config
            target: /etc/promtail
          - source: /var/log
            target: /var/log
            literal: true
            readonly: true
          - source: /etc/hostname
            target: /etc/hostname
            literal: true
            readonly: true
  prowlarr:
    name: prowlarr
    backup: true
    containers:
      - web_port: 9696
        repository: linuxserver/prowlarr
        tag: nightly
        env:
          PUID: "99"
          PGID: "100"
        bind_mounts:
          - source: config
            target: /config
  radarr:
    name: radarr
    backup: true
    containers:
      - repository: linuxserver/radarr
        web_port: 7878
        tag: latest
        bind_mounts:
          - source: config
            target: /config
          - source: "{{ glusterfs_appdata_dir }}/sabnzbd/downloads"
            target: /downloads
            literal: true
        nfs_mounts:
          - name: videos
            target: /videos
          - name: movies
            device_share: videos
            target: /movies
        env:
          TZ: America/New_York
          PUID: "99"
          PGID: "100"
  teslamate:
    name: teslamate
    containers:
      - name: teslamate-db
        repository: postgres
        tag: "12"
        env:
          TZ: "{{ default_timezone }}"
          POSTGRES_USER: "{{ secret.services.teslamate_db.postgres_user }}"
          POSTGRES_PASSWORD: "{{ secret.services.teslamate_db.postgres_password }}"
          POSTGRES_DB: "{{ secret.services.teslamate_db.postgres_db }}"
        bind_mounts:
          - source: postgres
            target: /var/lib/postgresql/data
      - name: teslamate-app
        repository: teslamate/teslamate
        tag: latest
        env:
          TZ: "{{ default_timezone }}"
          DATABASE_USER: "{{ secret.services.teslamate_db.postgres_user }}"
          DATABASE_PASS: "{{ secret.services.teslamate_db.postgres_password }}"
          DATABASE_NAME: "{{ secret.services.teslamate_db.postgres_db }}"
          DATABASE_HOST: "{{ secret.services.teslamate.database_host }}"
          DATABASE_PORT: "{{ secret.services.teslamate.database_port }}"
          MQTT_HOST: "{{ secret.services.teslamate.mqtt_host }}"
      - name: teslamate-grafana
        web_port: 3000
        repository: teslamate/grafana
        tag: latest
        env:
          TZ: "{{ default_timezone }}"
          DATABASE_USER: "{{ secret.services.teslamate_db.postgres_user }}"
          DATABASE_PASS: "{{ secret.services.teslamate_db.postgres_password }}"
          DATABASE_NAME: "{{ secret.services.teslamate_db.postgres_db }}"
          DATABASE_HOST: "{{ secret.services.teslamate.database_host }}"
          DATABASE_PORT: "{{ secret.services.teslamate.database_port }}"
        bind_mounts:
          - source: grafana
            target: /var/lib/grafana
  traefik_swarm:
    name: traefik-swarm
    init_role: traefik_swarm
    containers:
      - name: traefik
        web_port: 8080
        constraints:
          - node.role==manager
        web_hostname: traefik-swarm
        repository: traefik
        tag: latest
        publish:
          - published_port: 80
            target_port: 80
          - published_port: 443
            target_port: 443
        env:
          CLOUDFLARE_EMAIL: "{{ secret.services.traefik_internal.cloudflare_email }}"
          CLOUDFLARE_API_KEY: "{{ secret.services.traefik_internal.cloudflare_key }}"
        labels:
          traefik.http.services.justAdummyService.loadbalancer.server.port: "1337"
          traefik.http.middlewares.traefik-auth.basicauth.users: "{{ secret.services.traefik_internal.credentials }}"
          traefik.http.routers.traefik-swarm-secure.middlewares: traefik-auth
          traefik.http.routers.traefik-swarm-secure.service: api@internal
        bind_mounts:
          - source: /var/run/docker.sock
            target: /var/run/docker.sock
            type: file
            literal: true
            readonly: true
          - source: data/traefik.yml
            target: /traefik.yml
            type: file
            readonly: true
          - source: data/acme.json
            target: /acme.json
            type: file
          - source: config.yml
            target: /config.yml
            type: file
            readonly: true
  whoogle:
    name: whoogle
    containers:
      - web_port: 5000
        repository: benbusby/whoogle-search
        tag: latest
