# Force to use this specific interpretor
ansible_python_interpreter: /usr/bin/python3

# The timezone used on servers and docker containers
default_timezone: America/New_York

# Root path for netboot assets
netboot_assets_path: /Volumes/netboot

swarm_services:
  bitwarden:
    name: bitwarden
    backup: true
    containers:
      - repository: vaultwarden/server
        tag: latest
        web_port: 80
        env:
          SERVER_ADMIN_EMAIL: "{{ secret.services.bitwarden.server_admin_email }}"
          SIGNUPS_ALLOWED: "false"
          INVITATIONS_ALLOWED: "true"
          WEBSOCKET_ENABLED: "true"
          ROCKET_PORT: "80"
        bind_mounts:
          - source: data
            target: /data
  ddns:
    name: ddns
    containers:
      - repository: ghcr.io/akarys42/cloudflare-ddns-docker
        tag: latest
        env:
          TZ: "{{ default_timezone }}"
          CF_DDNS_TOKEN: "{{ secret.services.ddns.token }}"
          CF_DDNS_DOMAINS: "{{ secret.services.ddns.domains }}"
  git_hash_updater:
    name: git-hash_updater
    containers:
      - repository: fdrake/git-hash-updater
        tag: latest
        env:
          TZ: "{{ default_timezone }}"
          GIT_USER_EMAIL: "{{ secret.services.git_hash_updater.git_user_email }}"
          GIT_USER_NAME: "{{ secret.services.git_hash_updater.git_user_name }}"
        bind_mounts:
          - source: data
            target: /data
  gitea:
    name: gitea
    backup: true
    containers:
      - name: gitea
        repository: gitea/gitea
        web_port: 3000
        tag: 1.16.7
        env:
          GITEA__database__DB_TYPE: mysql
          GITEA__database__HOST: "gitea-db"
          GITEA__database__NAME: "{{ secret.services.gitea.mariadb.mysql_name }}"
          GITEA__database__USER: "{{ secret.services.gitea.mariadb.mysql_user }}"
          GITEA__database__PASSWD: "{{ secret.services.gitea.mariadb.mysql_password }}"
        bind_mounts:
          - source: data
            target: /data
      - name: gitea-db
        repository: mariadb
        tag: "10"
        env:
          MYSQL_ROOT_PASSWORD: "{{ secret.services.gitea.mariadb.mysql_root_password }}"
          MYSQL_DATABASE: "{{ secret.services.gitea.mariadb.mysql_name }}"
          MYSQL_USER: "{{ secret.services.gitea.mariadb.mysql_user }}"
          MYSQL_PASSWORD: "{{ secret.services.gitea.mariadb.mysql_password }}"
        bind_mounts:
          - source: mariadb
            target: /var/lib/mysql
  grafana:
    name: grafana
    containers:
      - repository: grafana/grafana-oss
        tag: latest
        web_port: 3000
        env:
          GF_PANELS_DISABLE_SANITIZE_HTML: "true"
          GF_AUTH_ANONYMOUS_ENABLED: "true"
        bind_mounts:
          - source: data
            target: /var/lib/grafana
  homeassistant:
    name: homeassistant
    backup: true
    containers:
      - repository: ghcr.io/linuxserver/homeassistant
        web_port: 8123
        tag: latest
        env:
          TZ: "{{ default_timezone }}"
          PUID: "99"
          PGID: "100"
          UMASK: "022"
        bind_mounts:
          - source: config
            target: /config
        publish:
          - published_port: 42843
            target_port: 42843
            mode: host
  images:
    name: images
    init_role: images
    post_role: images
    post_role_tasks_from: post_service
    containers:
      - repository: lscr.io/linuxserver/nginx
        tag: latest
        web_port: 80
        env:
          PUID: "1000"
          PGID: "1000"
          TZ: "America/New_York"
        bind_mounts:
          - source: config
            target: /config
  loki:
    name: loki
    init_role: loki
    containers:
      - repository: grafana/loki
        tag: latest
        web_port: 3100
        bind_mounts:
          - source: config
            target: /etc/loki
          - source: data
            target: /data
          - source: wal
            target: /wal
        publish:
          - published_port: 43645
            target_port: 3100
            mode: host
  mqtt:
    name: mqtt
    containers:
      - repository: eclipse-mosquitto
        tag: 2.0.14
        bind_mounts:
          - source: config
            target: /mosquitto/config
          - source: data
            target: /mosquitto/data
        publish:
          - published_port: 44622
            target_port: 1883
            mode: host
          - published_port: 44623
            target_port: 8080
            mode: host
  netbox:
    name: netbox
    backup: true
    backup_env:
      BACKUP_TYPES: postgresql
      PG_HOST: netbox-postgres
      PG_DATABASE: "{{ secret.services.netbox.postgres.database }}"
      PG_PORT: "{{ secret.services.netbox.postgres.port }}"
      PG_USER: "{{ secret.services.netbox.postgres.user }}"
      PG_PASSWORD: "{{ secret.services.netbox.postgres.password }}"
      PG_BACKUP_FILE: "netbox.sql"
    containers:
      - name: netbox-postgres
        repository: postgres
        tag: "12"
        env:
          POSTGRES_USER: "{{ secret.services.netbox.postgres.user }}"
          POSTGRES_PASSWORD: "{{ secret.services.netbox.postgres.password }}"
          POSTGRES_DB: "{{ secret.services.netbox.postgres.database }}"
        bind_mounts:
          - source: data
            target: /var/lib/postgresql/data
      - name: netbox-redis
        repository: redis
        tag: latest
      - name: netbox
        repository: linuxserver/netbox
        tag: "3.1.11"
        web_port: 8000
        env:
          PUID: "99"
          PGID: "100"
          SUPERUSER_EMAIL: "{{ secret.services.netbox.superuser.email }}"
          SUPERUSER_PASSWORD: "{{ secret.services.netbox.superuser.password }}"
          ALLOWED_HOST: "{{ secret.services.netbox.allowed_host }}"
          DB_NAME: "{{ secret.services.netbox.postgres.database }}"
          DB_USER: "{{ secret.services.netbox.postgres.user }}"
          DB_PASSWORD: "{{ secret.services.netbox.postgres.password }}"
          DB_HOST: "netbox-postgres"
          DB_PORT: "{{ secret.services.netbox.postgres.port }}"
          REDIS_HOST: "netbox-redis"
          REDIS_PORT: "{{ secret.services.netbox.redis.port }}"
        bind_mounts:
          - source: config
            target: /config
  nginx_static:
    name: nginx-static
    containers:
      - web_port: 80
        web_hostname: external-static
        repository: linuxserver/nginx
        tag: latest
        bind_mounts:
          - source: config
            target: /config
        nfs_mounts:
          - name: nginx_external
            target: /www
  node_red:
    name: node-red
    backup: true
    containers:
      - name: node-red-postgres
        repository: postgres
        tag: latest
        bind_mounts:
          - source: postgres
            target: /var/lib/postgresql/data
        env:
          POSTGRES_USER: "{{ secret.services.node_red.postgres.user }}"
          POSTGRES_PASSWORD: "{{ secret.services.node_red.postgres.password }}"
          POSTGRES_DB: "{{ secret.services.node_red.postgres.database }}"
      - name: node-red
        web_port: 1880
        web_hostname: nodered
        repository: nodered/node-red
        tag: 2.2.3
        bind_mounts:
          - source: data
            target: /data
          - source: /var/log/custom_logs
            target: /log
            literal: true
        nfs_mounts:
          - name: camera_videos
            target: /camera_videos
        env:
          TZ: "{{ default_timezone }}"
          NODE_RED_ENABLE_SAFE_MODE: "false"
        # publish:
        #   - published_port: 3456
        #     target_port: 3456
        #     mode: host
  office_touchpad:
    name: office-touchpad
    backup: true
    containers:
      - repository: ghcr.io/fred-drake/office-touchpad
        tag: latest
        web_port: 3000
        bind_mounts:
          - source: config/runtime-config.js
            target: /work/build/runtime-config.js
            type: file
  overseerr:
    name: overseerr
    containers:
      - name: overseerr
        repository: linuxserver/overseerr
        tag: latest
        web_port: 5055
        env:
          PUID: "1000"
          PGID: "1000"
        bind_mounts:
          - source: config
            target: /config
  paperless:
    name: paperless
    backup: true
    backup_env:
      PRE_COMMAND: /usr/bin/docker exec paperless python3 /usr/src/paperless/src/manage.py document_exporter /backup/
    backup_mounts:
      - /usr/bin/docker:/usr/bin/docker
      - /var/run/docker.sock:/var/run/docker.sock
      - "{{ glusterfs_appdata_dir }}/paperless/paperless/backup:/backup/paperless"
    containers:
      - name: paperless
        web_port: 8000
        repository: linuxserver/paperless-ngx
        tag: latest
        env:
          PUID: "1000"
          PGID: "1000"
          PAPERLESS_REDIS: "redis://paperless-redis:6379"
          REDIS_URL: "redis://paperless-redis:6379"
          PAPERLESS_OCR_LANGUAGE: eng
          PAPERLESSS_FILE_FORMAT: "{created}-{correspondent}-{title}"
          PAPERLESS_CONSUMER_POLLING: "30"
          PAPERLESS_SECRET_KEY: "{{ secret.services.paperless.paperless_secret_key }}"
          PAPERLESS_CORS_ALLOWED_HOSTS: "https://paperless.{{ secret.domain }}"
          PAPERLESS_ADMIN_USER: "{{ secret.services.paperless.user }}"
          PAPERLESS_ADMIN_PASSWORD: "{{ secret.services.paperless.password }}"
          PAPERLESS_URL: "https://paperless.{{ secret.domain }}"
        bind_mounts:
          - source: config
            target: /config
          - source: data
            target: /data
          - source: backup
            target: /backup
      - name: paperless-redis
        repository: redis
        tag: 6.2.6          
  pihole_exporter:
    name: pihole-exporter
    containers:
      - name: pihole-exporter-pihole1
        repository: ekofr/pihole-exporter
        tag: latest
        web_port: 9617
        env:
          PIHOLE_HOSTNAME: "pihole1.{{ secret.domain }}"
          PIHOLE_API_TOKEN: "{{ secret.pihole.pihole1.api_token }}"
          # PIHOLE_PROTOCOL: https
          INTERVAL: 30s
          PORT: "9617"
      - name: pihole-exporter-pihole2
        repository: ekofr/pihole-exporter
        tag: latest
        web_port: 9618
        env:
          PIHOLE_HOSTNAME: "pihole2.{{ secret.domain }}"
          PIHOLE_API_TOKEN: "{{ secret.pihole.pihole2.api_token }}"
          # PIHOLE_PROTOCOL: https
          INTERVAL: 30s
          PORT: "9618"

  prometheus:
    name: prometheus
    init_role: prometheus
    containers:
      - web_port: 9090
        repository: prom/prometheus
        tag: latest
        bind_mounts:
          - source: config
            target: /etc/prometheus
  prom_node_exporter:
    name: prom-node-exporter
    containers:
      - repository: prom/node-exporter
        tag: latest
        mode: global
        constraints:
          # Force on all nodes, both workers and managers.
          - node.role != foo
        command: >
          /bin/sh -c
          "/bin/node_exporter
          --path.procfs=/host/proc
          --path.rootfs=/rootfs
          --path.sysfs=/host/sys
          --collector.filesystem.mount-points-exclude='^/(sys|proc|dev|host|etc)($$|/)'"
        bind_mounts:
          - source: /proc
            target: /host/proc
            literal: true
            readonly: true
          - source: /sys
            target: /host/sys
            literal: true
            readonly: true
          - source: /
            target: /rootfs
            literal: true
            readonly: true
        publish:
          - published_port: 9100
            target_port: 9100
  promtail:
    name: promtail
    init_role: promtail
    containers:
      - repository: grafana/promtail
        tag: latest
        mode: global
        constraints:
          # Force on all nodes, both workers and managers.
          - node.role != foo
        command: >
            /bin/sh -c
            "export HOSTNAME=`/bin/cat /etc/hostname` &&
            /usr/bin/promtail --client.external-labels=host=$HOSTNAME --config.file=/etc/promtail/config.yml"
        bind_mounts:
          - source: config
            target: /etc/promtail
          - source: /var/log
            target: /var/log
            literal: true
            readonly: true
          - source: /etc/hostname
            target: /etc/hostname
            literal: true
            readonly: true
  prowlarr:
    name: prowlarr
    backup: true
    containers:
      - web_port: 9696
        repository: linuxserver/prowlarr
        tag: nightly
        env:
          PUID: "99"
          PGID: "100"
        bind_mounts:
          - source: config
            target: /config
  radarr:
    name: radarr
    backup: true
    containers:
      - repository: linuxserver/radarr
        web_port: 7878
        tag: latest
        bind_mounts:
          - source: config
            target: /config
          - source: "{{ glusterfs_appdata_dir }}/sabnzbd/sabnzbd/downloads"
            target: /downloads
            literal: true
        nfs_mounts:
          - name: videos
            target: /videos
          - name: movies
            device_share: videos
            target: /movies
        env:
          TZ: America/New_York
          PUID: "99"
          PGID: "100"
  sabnzbd:
    name: sabnzbd
    backup: true
    containers:
      - repository: linuxserver/sabnzbd
        tag: latest
        web_port: 8080
        bind_mounts:
          - source: config
            target: /config
          - source: downloads
            target: /downloads
          - source: incomplete-downloads
            target: /incomplete-downloads
        env:
          PUID: "99"
          PGID: "100"
  sonarr:
    name: sonarr
    backup: true
    containers:
      - repository: linuxserver/sonarr
        tag: latest
        web_port: 8989
        bind_mounts:
          - source: config
            target: /config
          - source: "{{ glusterfs_appdata_dir }}/sabnzbd/sabnzbd/downloads"
            target: /downloads
            literal: true
        nfs_mounts:
          - name: videos
            target: /videos
        env:
          TZ: America/New_York
          PUID: "99"
          PGID: "100"
  teslamate:
    name: teslamate
    containers:
      - name: teslamate-db
        repository: postgres
        tag: "12"
        env:
          TZ: "{{ default_timezone }}"
          POSTGRES_USER: "{{ secret.services.teslamate_db.postgres_user }}"
          POSTGRES_PASSWORD: "{{ secret.services.teslamate_db.postgres_password }}"
          POSTGRES_DB: "{{ secret.services.teslamate_db.postgres_db }}"
        bind_mounts:
          - source: postgres
            target: /var/lib/postgresql/data
      - name: teslamate-app
        repository: teslamate/teslamate
        tag: latest
        env:
          TZ: "{{ default_timezone }}"
          DATABASE_USER: "{{ secret.services.teslamate_db.postgres_user }}"
          DATABASE_PASS: "{{ secret.services.teslamate_db.postgres_password }}"
          DATABASE_NAME: "{{ secret.services.teslamate_db.postgres_db }}"
          DATABASE_HOST: "{{ secret.services.teslamate.database_host }}"
          DATABASE_PORT: "{{ secret.services.teslamate.database_port }}"
          MQTT_HOST: "{{ secret.services.teslamate.mqtt_host }}"
      - name: teslamate-grafana
        web_port: 3000
        repository: teslamate/grafana
        tag: latest
        env:
          TZ: "{{ default_timezone }}"
          DATABASE_USER: "{{ secret.services.teslamate_db.postgres_user }}"
          DATABASE_PASS: "{{ secret.services.teslamate_db.postgres_password }}"
          DATABASE_NAME: "{{ secret.services.teslamate_db.postgres_db }}"
          DATABASE_HOST: "{{ secret.services.teslamate.database_host }}"
          DATABASE_PORT: "{{ secret.services.teslamate.database_port }}"
        bind_mounts:
          - source: grafana
            target: /var/lib/grafana
  traefik_swarm:
    name: traefik-swarm
    init_role: traefik_swarm
    containers:
      - name: traefik
        web_port: 8080
        constraints:
          - node.role==manager
        web_hostname: traefik-swarm
        repository: traefik
        tag: latest
        publish:
          - published_port: 80
            target_port: 80
          - published_port: 443
            target_port: 443
        env:
          CLOUDFLARE_EMAIL: "{{ secret.services.traefik_internal.cloudflare_email }}"
          CLOUDFLARE_API_KEY: "{{ secret.services.traefik_internal.cloudflare_key }}"
        labels:
          traefik.http.services.justAdummyService.loadbalancer.server.port: "1337"
          traefik.http.middlewares.traefik-auth.basicauth.users: "{{ secret.services.traefik_internal.credentials }}"
          traefik.http.routers.traefik-swarm-secure.middlewares: traefik-auth
          traefik.http.routers.traefik-swarm-secure.service: api@internal
        bind_mounts:
          - source: /var/run/docker.sock
            target: /var/run/docker.sock
            type: file
            literal: true
            readonly: true
          - source: data/traefik.yml
            target: /traefik.yml
            type: file
            readonly: true
          - source: data/acme.json
            target: /acme.json
            type: file
          - source: config.yml
            target: /config.yml
            type: file
            readonly: true
  whoogle:
    name: whoogle
    containers:
      - web_port: 5000
        repository: benbusby/whoogle-search
        tag: latest
