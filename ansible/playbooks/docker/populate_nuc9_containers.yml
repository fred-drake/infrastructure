- hosts: nuc9
  gather_facts: false
  become: true
  roles:
    ### NetbootXYZ ###
    - role: docker/volume
      vars:
        volume:
          name: netboot
          container: netbootxyz
          driver: cifs
          mount_options: gid=100,uid=99,file_mode=0777,dir_mode=0777,ro
      tags: netboot
    - role: docker/container
      vars:
        container:
          name: netbootxyz
          repository: lscr.io/linuxserver/netbootxyz
          tag: latest
          networks:
            - name: "{{ secret.docker.network.container }}"
              ipv4_address: "{{ secret.services.netboot.ip_50 }}"
            - name: "{{ secret.docker.network.admin }}"
              ipv4_address: "{{ secret.services.netboot.ip_208 }}"
            # - name: "{{ secret.docker.network.workstation }}"
            #   ipv4_address: "{{ secret.services.netboot.ip_30 }}"
          env:
            MENU_VERSION: 1.9.9
            PORT_RANGE: 30000:30010
            SUBFOLDER: /
            PUID: "99"
            PGID: "100"
            UMASK: "022"
          mounts:
            - source: netbootxyz_netboot
              target: /assets
          volumes:
            - "{{ glusterfs_appdata_dir }}/netbootxyz/config:/config"
      tags: netboot

    ### Dozzle - NUC9 ###
    - role: docker/container
      vars:
        container:
          name: dozzle
          repository: amir20/dozzle
          tag: "{{ special_tags.dozzle.tag | default('latest') }}"
          ip: "{{ secret.services.dozzle.nuc9_ip }}"
          env:
            DOZZLE_BASE: /
            DOZZLE_LEVEL: info
            DOZZLE_TAILSIZE: "300"
          volumes:
            - /var/run/docker.sock:/var/run/docker.sock
      tags: dozzle

    ### Prowlarr ###
    - role: docker/container
      vars:
        container:
          name: prowlarr
          repository: linuxserver/prowlarr
          tag: 0.1.10-nightly
          ip: "{{ secret.services.prowlarr.ip }}"
          env:
            PUID: "99"
            PGID: "100"
          volumes:
            - "{{ appdata_dir }}/prowlarr/config:/config"
      tags: prowlarr
    - role: docker/backup_client
      vars:
        backup_namespace: prowlarr
        env:
          NAMESPACE: "{{ backup_namespace }}"
        volumes:
          - "{{ appdata_dir }}/{{ backup_namespace }}:/backup/{{ backup_namespace }}"
      tags: prowlarr

    ### Radarr ###
    # - role: docker/volume
    #   vars:
    #     volume:
    #       name: videos
    #       container: radarr
    #       driver: cifs
    #       mount_options: gid=100,uid=99,file_mode=0777,dir_mode=0777
    #   tags: radarr
    # - role: docker/volume
    #   vars:
    #     volume:
    #       name: movies
    #       container: radarr
    #       driver: cifs
    #       mount_options: gid=100,uid=99,file_mode=0777,dir_mode=0777
    #   tags: radarr
    # - role: docker/volume
    #   vars:
    #     volume:
    #       name: downloads
    #       mount_name: torrent/complete
    #       container: radarr
    #       driver: cifs
    #       mount_options: gid=100,uid=99,file_mode=0777,dir_mode=0777
    #   tags: radarr
    # - role: docker/container
    #   vars:
    #     container:
    #       name: radarr
    #       repository: linuxserver/radarr
    #       tag: latest
    #       ip: "{{ secret.services.radarr.ip }}"
    #       env:
    #         PUID: "99"
    #         PGID: "100"
    #       volumes:
    #         - "{{ appdata_dir }}/radarr/config:/config"
    #         - "{{ glusterfs_appdata_dir }}/sabnzbd/downloads:/downloads"
    #       mounts:
    #         - source: radarr_videos
    #           target: /videos
    #         - source: radarr_videos
    #           target: /movies
    #   tags: radarr
    # - role: docker/backup_client
    #   vars:
    #     backup_namespace: radarr
    #     env:
    #       NAMESPACE: "{{ backup_namespace }}"
    #     volumes:
    #       - "{{ appdata_dir }}/{{ backup_namespace }}:/backup/{{ backup_namespace }}"
    #   tags: radarr

    ### Sonarr ###
    - role: docker/volume
      vars:
        volume:
          name: videos
          container: sonarr
          driver: cifs
          mount_options: gid=100,uid=99,file_mode=0777,dir_mode=0777
      tags: sonarr
    - role: docker/volume
      vars:
        volume:
          name: downloads
          container: sonarr
          mount_name: torrent/complete
          driver: cifs
          mount_options: gid=100,uid=99,file_mode=0777,dir_mode=0777
      tags: sonarr
    - role: docker/container
      vars:
        container:
          name: sonarr
          repository: linuxserver/sonarr
          tag: latest
          ip: "{{ secret.services.sonarr.ip }}"
          env:
            PUID: "99"
            PGID: "100"
          volumes:
            - "{{ glusterfs_appdata_dir }}/sonarr/config:/config"
            - "{{ glusterfs_appdata_dir }}/sabnzbd/downloads:/downloads"
          mounts:
            - source: sonarr_videos
              target: /videos
      tags: sonarr
    - role: docker/backup_client
      vars:
        backup_namespace: sonarr
        env:
          NAMESPACE: "{{ backup_namespace }}"
        volumes:
          - "{{ glusterfs_appdata_dir }}/{{ backup_namespace }}:/backup/{{ backup_namespace }}"
      tags: sonarr

    ### Netbox ###
    - role: docker/container
      vars:
        container:
          name: netbox-db-postgres
          repository: postgres
          tag: "12"
          ip: "{{ secret.services.netbox.postgres.ip }}"
          env:
            POSTGRES_USER: "{{ secret.services.netbox.postgres.user }}"
            POSTGRES_PASSWORD: "{{ secret.services.netbox.postgres.password }}"
            POSTGRES_DB: "{{ secret.services.netbox.postgres.database }}"
          volumes:
            - "{{ appdata_dir }}/netbox-db-postgres:/var/lib/postgresql/data"
      tags: netbox
    - role: docker/container
      vars:
        container:
          name: netbox-db-redis
          repository: redis
          tag: latest
          ip: "{{ secret.services.netbox.redis.ip }}"
      tags: netbox
    - role: docker/container
      vars:
        container:
          name: netbox
          repository: linuxserver/netbox
          tag: "3.1.11"
          ip: "{{ secret.services.netbox.ip }}"
          env:
            PUID: "99"
            PGID: "100"
            SUPERUSER_EMAIL: "{{ secret.services.netbox.superuser.email }}"
            SUPERUSER_PASSWORD: "{{ secret.services.netbox.superuser.password }}"
            ALLOWED_HOST: "{{ secret.services.netbox.allowed_host }}"
            DB_NAME: "{{ secret.services.netbox.postgres.database }}"
            DB_USER: "{{ secret.services.netbox.postgres.user }}"
            DB_PASSWORD: "{{ secret.services.netbox.postgres.password }}"
            DB_HOST: "{{ secret.services.netbox.postgres.ip }}"
            DB_PORT: "{{ secret.services.netbox.postgres.port }}"
            REDIS_HOST: "{{ secret.services.netbox.redis.ip }}"
            REDIS_PORT: "{{ secret.services.netbox.redis.port }}"
          volumes:
            - "{{ appdata_dir }}/netbox/config:/config"
      tags: netbox
    - role: docker/container
      vars:
        container:
          name: backup-netbox
          repository: ghcr.io/fred-drake/k8s-backup
          tag: latest
          ip: "{{ secret.services.netbox.backup_ip }}"
          env:
            AWS_ACCESS_KEY_ID: "{{ secret.backup.keyId }}"
            AWS_SECRET_ACCESS_KEY: "{{ secret.backup.keySecret }}"
            RESTIC_REPOSITORY: "s3:http://minio-backup-app.{{ secret.domain }}:9000/restic"
            RESTIC_PASSWORD: "{{ secret.backup.restic.password }}"
            NAMESPACE: netbox
            BACKUP_TYPES: postgresql
            PG_HOST: "{{ secret.services.netbox.postgres.ip }}"
            PG_DATABASE: "{{ secret.services.netbox.postgres.database }}"
            PG_PORT: "{{ secret.services.netbox.postgres.port }}"
            PG_USER: "{{ secret.services.netbox.postgres.user }}"
            PG_PASSWORD: "{{ secret.services.netbox.postgres.password }}"
            PG_BACKUP_FILE: "netbox.sql"
      tags: netbox

    ### Home Assistant ###
    - role: docker/volume
      vars:
        volume:
          name: ha_downloads
          container: homeassistant
          driver: cifs
          mount_options: gid=100,uid=99,file_mode=0777,dir_mode=0777
      tags: homeassistant
    - role: docker/container
      vars:
        container:
          name: homeassistant
          repository: ghcr.io/linuxserver/homeassistant
          tag: latest
          ip: "{{ secret.services.homeassistant.ip }}"
          env:
            PUID: "99"
            PGID: "100"
            UMASK: "022"
          volumes:
            - "{{ appdata_dir }}/homeassistant/config:/config"
          mounts:
            - source: homeassistant_ha_downloads
              target: /downloads
      tags: homeassistant
    - role: docker/backup_client
      vars:
        backup_namespace: homeassistant
        env:
          NAMESPACE: "{{ backup_namespace }}"
        volumes:
          - "{{ appdata_dir }}/{{ backup_namespace }}:/backup/{{ backup_namespace }}"
      tags: homeassistant

    ### Node Red ###
    # - role: docker/volume
    #   vars:
    #     volume:
    #       name: camera_videos
    #       container: node-red
    #       driver: cifs
    #       mount_options: gid=100,uid=99,file_mode=0777,dir_mode=0777
    #   tags: node_red
    # - role: docker/container
    #   vars:
    #     container:
    #       name: node-red-postgres
    #       repository: postgres
    #       tag: 14.1
    #       ip: "{{ secret.services.node_red.postgres.ip }}"
    #       env:
    #         POSTGRES_USER: "{{ secret.services.node_red.postgres.user }}"
    #         POSTGRES_PASSWORD: "{{ secret.services.node_red.postgres.password }}"
    #         POSTGRES_DB: "{{ secret.services.node_red.postgres.database }}"
    #       volumes:
    #         - "{{ appdata_dir }}/node-red-postgres:/var/lib/postgresql/data"
    #   tags: node_red
    # - role: docker/container
    #   vars:
    #     container:
    #       name: "node-red"
    #       repository: "nodered/node-red"
    #       tag: 2.2.2
    #       ip: "{{ secret.services.node_red.ip }}"
    #       env:
    #         NODE_RED_ENABLE_SAFE_MODE: "false"
    #       volumes:
    #         - "{{ appdata_dir }}/node-red/data:/data"
    #       mounts:
    #         - source: node-red_camera_videos
    #           target: /camera_videos
    #   tags: node_red
    # - role: docker/backup_client
    #   vars:
    #     backup_namespace: "node-red"
    #     env:
    #       NAMESPACE: "{{ backup_namespace }}"
    #     volumes:
    #       - "{{ appdata_dir }}/{{ backup_namespace }}:/backup/{{ backup_namespace }}"
    #   tags: node_red

    ### MQTT ###
    - role: docker/container
      vars:
        container:
          name: mqtt
          repository: eclipse-mosquitto
          tag: 2.0.14
          ip: "{{ secret.services.mqtt.ip }}"
          volumes:
            - "{{ appdata_dir }}/mqtt/config:/mosquitto/config"
            - "{{ appdata_dir }}/mqtt/data:/mosquitto/data"
      tags: mqtt

    ### Office Touchpad ###
    - role: docker/container
      vars:
        container:
          name: office-touchpad
          repository: ghcr.io/fred-drake/office-touchpad
          tag: latest
          ip: "{{ secret.services.office_touchpad.ip }}"
          volumes:
            - "{{ appdata_dir }}/office-touchpad/runtime-config.js:/work/build/runtime-config.js"
      tags: office_touchpad

    ### Prometheus ###
    # - role: docker/container
    #   vars:
    #     container:
    #       name: prometheus
    #       repository: prom/prometheus
    #       tag: latest
    #       ip: "{{ secret.services.prometheus.ip }}"
    #       volumes:
    #         - "{{ appdata_dir }}/prometheus/config:/etc/prometheus"
    #   tags: prometheus
    # - role: docker/prometheus
    #   tags: prometheus

    ### Prometheus Node Exporter ###
    - role: docker/container
      vars:
        container:
          name: node-exporter
          repository: prom/node-exporter
          tag: latest
          ip: "{{ secret.services.prometheus.node_exporter.nuc9.ip }}"
          volumes:
            - /proc:/host/proc:ro
            - /sys:/host/sys:ro
            - /:/rootfs:ro
          command:
            - "--path.procfs=/host/proc"
            - "--path.rootfs=/rootfs"
            - "--path.sysfs=/host/sys"
            - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
      tags: prometheus

    ### Overseerr ###
    - role: docker/container
      vars:
        container:
          name: overseerr
          repository: linuxserver/overseerr
          tag: latest
          ip: "{{ secret.services.overseerr.ip }}"
          env:
            PUID: "1000"
            PGID: "1000"
          volumes:
            - "{{ appdata_dir }}/overseerr/config:/config"
      tags: overseerr

    ### Netboot Assets Bridge ###
    - role: docker/volume
      vars:
        volume:
          name: netboot
          container: netboot-assets-bridge
          driver: cifs
          mount_options: uid=99,gid=100,file_mode=0777,dir_mode=0777
      tags: netboot
    - role: docker/container
      vars:
        container:
          name: netboot-assets-bridge
          repository: ghcr.io/fred-drake/python-ssh
          tag: latest
          ip: "{{ secret.services.netboot_assets_bridge.ip }}"
          env:
            PUBLIC_KEYS_URL: https://github.com/fred-drake.keys
          mounts:
            - source: netboot-assets-bridge_netboot
              target: /netboot
      tags: netboot

      ### DIUN ###
    - role: docker/container
      vars:
        container:
          name: diun-nuc9
          repository: crazymax/diun
          tag: latest
          ip: "{{ secret.services.diun.nuc9_ip }}"
          env:
            LOG_LEVEL: info
            LOG_JSON: "false"
            DIUN_WATCH_WORKERS: "20"
            DIUN_WATCH_SCHEDULE: 0 9 * * *
            DIUN_PROVIDERS_DOCKER: "true"
            DIUN_PROVIDERS_DOCKER_WATCHBYDEFAULT: "true"
            DIUN_NOTIF_SLACK_WEBHOOKURL: "{{ secret.services.diun.webhook_url }}"
          volumes:
            - "{{ appdata_dir }}/diun/data:/data"
            - "/var/run/docker.sock:/var/run/docker.sock"
      tags: diun

    ### Uptime Kuma ###
    - role: docker/container
      vars:
        container:
          name: uptime-kuma
          repository: louislam/uptime-kuma
          tag: "{{ special_tags.uptime_kuma.tag | default('latest') }}"
          ip: "{{ secret.services.uptime_kuma.ip }}"
          volumes:
            - "{{ glusterfs_appdata_dir }}/uptime-kuma:/app/data"
      tags: uptime_kuma
    - role: docker/backup_client
      vars:
        backup_namespace: "uptime-kuma"
        env:
          NAMESPACE: "{{ backup_namespace }}"
        volumes:
          - "{{ glusterfs_appdata_dir }}/{{ backup_namespace }}:/backup/{{ backup_namespace }}"
      tags: uptime_kuma

    ### Swarm Layer 4 Load Balancer ###
    - name: swarm layer 4 load balancer
      role: docker/swarm-lb
      tags: swarm_lb

    ### Traefik Internal ###
    - name: traefik internal
      role: docker/traefik
      vars:
        traefik_type: internal
        proxies:
          - name: bitwarden
            url: "http://{{ secret.services.bitwarden.ip }}"
          - name: calibre
            url: "http://{{ secret.services.calibre_web.ip }}:8083"
          - name: calibre-server
            url: "http://{{ secret.services.calibre.ip }}:8080"
          - name: ersatz
            url: "http://{{ secret.services.ersatz.ip }}:8409"
          - name: gitea
            url: "http://{{ secret.services.gitea.ip }}:3000"
          - name: grafana
            url: "http://{{ secret.services.grafana.ip }}:3000"
          - name: homeassistant
            url: "http://{{ secret.services.homeassistant.ip }}:8123"
          - name: homebridge
            url: "http://{{ secret.services.homebridge.ip }}:8581"
          - name: minio-backup
            url: "http://{{ secret.services.minio_backup.ip }}:9000"
          - name: minio-backup-ui
            url: "http://{{ secret.services.minio_backup.ip }}:9001"
          - name: minio-loki
            url: "http://{{ secret.services.minio_loki.ip }}:9000"
          - name: minio-loki-ui
            url: "http://{{ secret.services.minio_loki.ip }}:9001"
          - name: netboot
            url: "http://{{ secret.services.netboot.ip_50 }}:3000"
          - name: netbox
            url: "http://{{ secret.services.netbox.ip }}:8000"
          - name: nodered
            url: "http://{{ secret.services.node_red.ip }}:1880"
          - name: office-touchpad
            url: "http://{{ secret.services.office_touchpad.ip }}:3000"
          - name: overseerr
            url: "http://{{ secret.services.overseerr.ip }}:5055"
          - name: paperless
            url: "http://{{ secret.services.paperless.ip }}:8000"
          - name: photoprism-internal
            url: "http://{{ secret.services.photoprism.internal_ip }}:2342"
          - name: plex
            url: "http://{{ secret.services.plex.ip }}:32400"
          - name: prometheus
            url: "http://{{ secret.services.prometheus.ip }}:9090"
          - name: prowlarr
            url: "http://{{ secret.services.prowlarr.ip }}:9696"
          - name: radarr
            url: "http://{{ secret.services.radarr.ip }}:7878"
          - name: readarr
            url: "http://{{ secret.services.readarr.ip }}:8787"
          - name: sabnzbd
            url: "http://{{ secret.services.sabnzbd.ip }}:8080"
          - name: scanner-api
            url: "http://{{ secret.services.scannerpi.ip }}:3000"
          - name: sonarr
            url: "http://{{ secret.services.sonarr.ip }}:8989"
          - name: tdarr
            url: "http://{{ secret.services.tdarr.ip }}:8265"
          - name: torrent
            url: "http://{{ secret.services.torrent.ip }}:9091"
          - name: uptime-kuma
            url: "http://{{ secret.services.uptime_kuma.ip }}:3001"
          - name: whoogle
            url: "http://{{ secret.services.whoogle.ip }}:5000"
        container:
          name: traefik-internal
          repository: traefik
          tag: latest
          ip: "{{ secret.services.traefik_internal.ip }}"
          env:
            CLOUDFLARE_EMAIL: "{{ secret.services.traefik_internal.cloudflare_email }}"
            CLOUDFLARE_API_KEY: "{{ secret.services.traefik_internal.cloudflare_key }}"
          security_opts:
            - "no-new-privileges:true"
          labels:
            traefik.enable: "true"
            traefik.http.services.justAdummyService.loadbalancer.server.port: "1337"
            traefik.http.routers.traefik.entrypoints: http
            traefik.http.routers.traefik.rule: "Host (`traefik-internal.{{ secret.domain }}`)"
            traefik.http.middlewares.traefik-auth.basicauth.users: "{{ secret.services.traefik_internal.credentials }}"
            traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme: https
            traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto: https
            traefik.http.routers.traefik.middlewares: traefik-https-redirect
            traefik.http.routers.traefik-secure.entrypoints: https
            traefik.http.routers.traefik-secure.rule: "Host (`traefik-internal.{{ secret.domain }}`)"
            traefik.http.routers.traefik-secure.middlewares: traefik-auth
            traefik.http.routers.traefik-secure.tls: "true"
            traefik.http.routers.traefik-secure.tls.certresolver: cloudflare
            traefik.http.routers.traefik-secure.tls.domains[0].main: "{{ secret.domain }}"
            traefik.http.routers.traefik-secure.tls.domains[0].sans: "*.{{ secret.domain }}"
            traefik.http.routers.traefik-secure.service: api@internal
          volumes:
            - "/var/run/docker.sock:/var/run/docker.sock:ro"
            - "{{ glusterfs_appdata_dir }}/traefik-internal/data/traefik.yml:/traefik.yml:ro"
            - "{{ glusterfs_appdata_dir }}/traefik-internal/data/acme.json:/acme.json"
            - "{{ glusterfs_appdata_dir }}/traefik-internal/config.yml:/config.yml:ro"
      tags: traefik_internal

      ### V-Rising ###
    # - role: docker/container
    #   vars:
    #     container:
    #       name: vrising
    #       repository: mephi00/v-rising-wine
    #       tag: latest
    #       ip: "{{ secret.services.vrising.ip }}"
    #       env:
    #         V_RISING_NAME: example test
    #         V_RISING_PASSW: example password
    #         V_RISING_SAVE_NAME: save1
    #         V_RISING_PUBLIC_LIST: "false"
    #         V_RISING_GAME_MODE: PvE
    #       volumes:
    #         - "{{ appdata_dir }}/vrising/saves:/saves"
    #   tags: vrising

    ### SWAG Internal ###
    # - role: docker/container
    #   vars:
    #     container:
    #       name: swag-internal
    #       repository: linuxserver/swag
    #       tag: "{{ special_tags.swag.tag | default('latest') }}"
    #       ip: "{{ secret.services.swag_internal.ip }}"
    #       env:
    #         PUID: "99"
    #         PGID: "100"
    #         EMAIL: "{{ secret.services.swag_internal.email }}"
    #         URL: "{{ secret.services.swag_internal.url }}"
    #         SUBDOMAINS: "{{ secret.services.swag_internal.subdomains }}"
    #         ONLY_SUBDOMAINS: "{{ secret.services.swag_internal.only_subdomains }}"
    #         VALIDATION: "{{ secret.services.swag_internal.validation }}"
    #         DNSPLUGIN: "{{ secret.services.swag_internal.dnsplugin }}"
    #         STAGING: "{{ secret.services.swag_internal.staging }}"
    #       volumes:
    #         - "{{ appdata_dir }}/swag-internal:/config"
    #   tags: swag_internal
    # # Sync proxy files
    # - role: docker/swag_internal
    #   tags:
    #     - swag_internal
    #     - swag_internal_update
