- hosts: docker1
  gather_facts: false
  become: true
  roles:
    - docker/base
    
    ### Dozzle - Docker1 ###
    - role: docker/container
      vars:
        container:
          name: dozzle
          repository: amir20/dozzle
          tag: "{{ special_tags.dozzle.tag | default('latest') }}"
          ip: "{{ secret.services.dozzle.docker1_ip }}"
          env:
            DOZZLE_BASE: /
            DOZZLE_LEVEL: info
            DOZZLE_TAILSIZE: "300"
          volumes:
            - /var/run/docker.sock:/var/run/docker.sock

    ### SWAG Internal ###
    - role: docker/container
      vars:
        container:
          name: swag_internal
          repository: linuxserver/swag
          tag: "{{ special_tags.swag.tag | default('latest') }}"
          ip: "{{ secret.services.swag_internal.ip }}"
          env:
            PUID: "99"
            PGID: "100"
            EMAIL: "{{ secret.services.swag_internal.email }}"
            URL: "{{ secret.services.swag_internal.url }}"
            SUBDOMAINS: "{{ secret.services.swag_internal.subdomains }}"
            ONLY_SUBDOMAINS: "{{ secret.services.swag_internal.only_subdomains }}"
            VALIDATION: "{{ secret.services.swag_internal.validation }}"
            DNSPLUGIN: "{{ secret.services.swag_internal.dnsplugin }}"
            STAGING: "{{ secret.services.swag_internal.staging }}"
          volumes:
            - "{{ appdata_dir }}/swag-internal:/config"
    # Sync proxy files
    - docker/swag_internal

    ### static.freddrake.com site ###
    - role: docker/volume
      vars:
        volume:
          name: nginx_static
          container: nginx_static
          driver: cifs
          mount_options: gid=100,uid=99,file_mode=0777,dir_mode=0777
    - role: docker/container
      vars:
        container:
          name: nginx_static
          repository: linuxserver/nginx
          tag: "{{ special_tags.nginx_static.tag | default('latest') }}"
          ip: "{{ secret.services.nginx_static.ip }}"
          mounts:
            - source: nginx_static
              target: /www
          volumes:
            - "{{ appdata_dir }}/NginxStatic:/config"
          env:
            PUID: "99"
            PGID: "100"

    ### NetbootXYZ ###
    - role: docker/volume
      vars:
        volume:
          name: netboot
          container: netbootxyz
          driver: cifs
          mount_options: gid=100,uid=99,file_mode=0777,dir_mode=0777,ro
    - role: docker/container
      vars:
        container:
          name: netbootxyz
          repository: lscr.io/linuxserver/netbootxyz
          tag: latest
          networks:
            - name: "{{ secret.docker.network.container }}"
              ipv4_address: "{{ secret.services.netboot.ip_50 }}"
            - name: "{{ secret.docker.network.admin }}"
              ipv4_address: "{{ secret.services.netboot.ip_208 }}"
            - name: "{{ secret.docker.network.workstation }}"
              ipv4_address: "{{ secret.services.netboot.ip_30 }}"
          env:
            MENU_VERSION: 1.9.9
            PORT_RANGE: 30000:30010
            SUBFOLDER: /
            PUID: "99"
            PGID: "100"
            UMASK: "022"
          mounts:
            - source: netbootxyz_netboot
              target: /assets
          volumes:
            - "{{ appdata_dir }}/netbootxyz:/config"

    - docker/ddns
    - docker/git_hash_updater
    # - docker/smtp
    - docker/teslamate
    - docker/backup_client

- hosts: docker3
  gather_facts: false
  become: true
  roles:
    
    ### Dozzle - Docker3 ###
    - role: docker/container
      vars:
        container:
          name: dozzle
          repository: amir20/dozzle
          tag: "{{ special_tags.dozzle.tag | default('latest') }}"
          ip: "{{ secret.services.dozzle.docker3_ip }}"
          env:
            DOZZLE_BASE: /
            DOZZLE_LEVEL: info
            DOZZLE_TAILSIZE: "300"
          volumes:
            - /var/run/docker.sock:/var/run/docker.sock

    ### Whoogle ###
    - role: docker/container
      vars:
        container:
          name: whoogle
          repository: benbusby/whoogle-search
          tag: "{{ special_tags.whoogle.tag | default('latest') }}"
          ip: "{{ secret.services.whoogle.ip }}"
    ### Prowlarr ###
    - role: docker/container
      vars:
        container:
          name: prowlarr
          repository: linuxserver/prowlarr
          tag: 0.1.10-nightly
          ip: "{{ secret.services.prowlarr.ip }}"
          env:
            PUID: "99"
            PGID: "100"
          volumes:
            - "{{ appdata_dir }}/prowlarr/config:/config"
    - role: docker/backup_client
      vars:
        backup_namespace: prowlarr
        env:
          NAMESPACE: "{{ backup_namespace }}"
        volumes:
          - "{{ appdata_dir }}/{{ backup_namespace }}:/backup/{{ backup_namespace }}"

    ### Radarr ###
    - role: docker/volume
      vars:
        volume:
          name: videos
          container: radarr
          driver: cifs
          mount_options: gid=100,uid=99,file_mode=0777,dir_mode=0777
    - role: docker/volume
      vars:
        volume:
          name: movies
          container: radarr
          driver: cifs
          mount_options: gid=100,uid=99,file_mode=0777,dir_mode=0777
    - role: docker/volume
      vars:
        volume:
          name: torrent
          container: radarr
          driver: cifs
          mount_options: gid=100,uid=99,file_mode=0777,dir_mode=0777
    - role: docker/container
      vars:
        container:
          name: radarr
          repository: linuxserver/radarr
          tag: 0.0.5597
          ip: "{{ secret.services.radarr.ip }}"
          env:
            PUID: "99"
            PGID: "100"
          volumes:
            - "{{ appdata_dir }}/radarr/config:/config"
          mounts:
            - source: radarr_videos
              target: /videos
            - source: radarr_torrent
              target: /downloads
    - role: docker/backup_client
      vars:
        backup_namespace: radarr
        env:
          NAMESPACE: "{{ backup_namespace }}"
        volumes:
          - "{{ appdata_dir }}/{{ backup_namespace }}:/backup/{{ backup_namespace }}"

    ### Netbox ###
    - role: docker/container
      vars:
        container:
          name: netbox-db-postgres
          repository: postgres
          tag: "12"
          ip: "{{ secret.services.netbox.postgres.ip }}"
          env:
            POSTGRES_USER: "{{ secret.services.netbox.postgres.user }}"
            POSTGRES_PASSWORD: "{{ secret.services.netbox.postgres.password }}"
            POSTGRES_DB: "{{ secret.services.netbox.postgres.database }}"
          volumes:
            - "{{ appdata_dir }}/netbox-db-postgres:/var/lib/postgresql/data"
    - role: docker/container
      vars:
        container:
          name: netbox-db-redis
          repository: redis
          tag: latest
          ip: "{{ secret.services.netbox.redis.ip }}"
    - role: docker/container
      vars:
        container:
          name: netbox
          repository: linuxserver/netbox
          tag: latest
          ip: "{{ secret.services.netbox.ip }}"
          env:
            PUID: "99"
            PGID: "100"
            SUPERUSER_EMAIL: "{{ secret.services.netbox.superuser.email }}"
            SUPERUSER_PASSWORD: "{{ secret.services.netbox.superuser.password }}"
            ALLOWED_HOST: "{{ secret.services.netbox.allowed_host }}"
            DB_NAME: "{{ secret.services.netbox.postgres.database }}"
            DB_USER: "{{ secret.services.netbox.postgres.user }}"
            DB_PASSWORD: "{{ secret.services.netbox.postgres.password }}"
            DB_HOST: "{{ secret.services.netbox.postgres.ip }}"
            DB_PORT: "{{ secret.services.netbox.postgres.port }}"
            REDIS_HOST: "{{ secret.services.netbox.redis.ip }}"
            REDIS_PORT: "{{ secret.services.netbox.redis.port }}"
          volumes:
            - "{{ appdata_dir }}/netbox/config:/config"
    - role: docker/container
      vars:
        container: 
          name: backup-netbox
          repository: ghcr.io/fred-drake/k8s-backup
          tag: latest
          ip: "{{ secret.services.netbox.backup_ip }}"
          env:
            AWS_ACCESS_KEY_ID: "{{ secret.backup.keyId }}"
            AWS_SECRET_ACCESS_KEY: "{{ secret.backup.keySecret }}"
            RESTIC_REPOSITORY: "s3:http://minio-backup-app.{{ secret.domain }}:9000/restic"
            RESTIC_PASSWORD: "{{ secret.backup.restic.password }}"
            NAMESPACE: netbox
            BACKUP_TYPES: postgresql
            PG_HOST: "{{ secret.services.netbox.postgres.ip }}"
            PG_DATABASE: "{{ secret.services.netbox.postgres.database }}"
            PG_PORT: "{{ secret.services.netbox.postgres.port }}"
            PG_USER: "{{ secret.services.netbox.postgres.user }}"
            PG_PASSWORD: "{{ secret.services.netbox.postgres.password }}"
            PG_BACKUP_FILE: "netbox.sql"
    
    ### Home Assistant ###
    - role: docker/container
      vars:
        container:
          name: homeassistant
          repository: ghcr.io/linuxserver/homeassistant
          tag: 2021.11.5
          ip: "{{ secret.services.homeassistant.ip }}"
          env:
            PUID: "99"
            PGID: "100"
            UMASK: "022"
          volumes:
            - "{{ appdata_dir }}/homeassistant/config:/config"
    - role: docker/backup_client
      vars:
        backup_namespace: homeassistant
        env:
          NAMESPACE: "{{ backup_namespace }}"
        volumes:
          - "{{ appdata_dir }}/{{ backup_namespace }}:/backup/{{ backup_namespace }}"

    ### Node Red ###
    - role: docker/container
      vars:
        container:
          name: node-red-postgres
          repository: postgres
          tag: 14.1
          ip: "{{ secret.services.node_red.postgres.ip }}"
          env:
            POSTGRES_USER: "{{ secret.services.node_red.postgres.user }}"
            POSTGRES_PASSWORD: "{{ secret.services.node_red.postgres.password }}"
            POSTGRES_DB: "{{ secret.services.node_red.postgres.database }}"
          volumes:
            - "{{ appdata_dir }}/node-red-postgres:/var/lib/postgresql/data"
    - role: docker/container
      vars:
        container:
          name: "node-red"
          repository: "nodered/node-red"
          tag: 2.1.3
          ip: "{{ secret.services.node_red.ip }}"
          env:
            NODE_RED_ENABLE_SAFE_MODE: "false"
          volumes:
            - "{{ appdata_dir }}/node-red/data:/data"
    - role: docker/backup_client
      vars:
        backup_namespace: "node-red"
        env:
          NAMESPACE: "{{ backup_namespace }}"
        volumes:
          - "{{ appdata_dir }}/{{ backup_namespace }}:/backup/{{ backup_namespace }}"

    ### MQTT ###
    - role: docker/container
      vars:
        container:
          name: mqtt
          repository: eclipse-mosquitto
          tag: 2.0.14
          ip: "{{ secret.services.mqtt.ip }}"
          volumes:
            - "{{ appdata_dir }}/mqtt/config:/mosquitto/config"
            - "{{ appdata_dir }}/mqtt/data:/mosquitto/data"

    ### Office Touchpad ###
    - role: docker/container
      vars:
        container:
          name: office-touchpad
          repository: ghcr.io/fred-drake/office-touchpad
          tag: latest
          ip: "{{ secret.services.office_touchpad.ip }}"
          volumes:
            - "{{ appdata_dir }}/office-touchpad/runtime-config.js:/work/build/runtime-config.js"

- hosts: docker7
  gather_facts: false
  become: true
  roles:
    
    ### Dozzle - Docker7 ###
    - role: docker/container
      vars:
        container:
          name: dozzle
          repository: amir20/dozzle
          tag: "{{ special_tags.dozzle.tag | default('latest') }}"
          ip: "{{ secret.services.dozzle.docker7_ip }}"
          env:
            DOZZLE_BASE: /
            DOZZLE_LEVEL: info
            DOZZLE_TAILSIZE: "300"
          volumes:
            - /var/run/docker.sock:/var/run/docker.sock

    ### Paperless ###
    - role: docker/volume
      vars:
        volume:
          name: scanner
          container: paperless
          mount_name: ScannerIncoming
          driver: cifs
          mount_options: gid=1000,uid=1000,file_mode=0777,dir_mode=0777
    - role: docker/container
      vars:
        container:
          name: paperless-redis
          repository: redis
          tag: 6.2.6
          ip: "{{ secret.services.paperless.redis.ip }}"
    - role: docker/container
      vars:
        container:
          name: paperless
          repository: jonaswinkler/paperless-ng
          tag: 1.5.0
          ip: "{{ secret.services.paperless.ip }}"
          env:
            PUID: "1000"
            PGID: "1000"
            PAPERLESS_REDIS: "redis://{{ secret.services.paperless.redis.ip }}:{{ secret.services.paperless.redis.port }}"
            PAPERLESS_OCR_LANGUAGE: eng
            PAPERLESSS_FILE_FORMAT: "{created}-{correspondent}-{title}"
            PAPERLESS_CONSUMER_POLLING: "30"
            PAPERLESS_SECRET_KEY: "{{ secret.services.paperless.paperless_secret_key }}"
            PAPERLESS_CORS_ALLOWED_HOSTS: "https://paperless.{{ secret.domain }}"
            PAPERLESS_ADMIN_USER: "{{ secret.services.paperless.user }}"
            PAPERLESS_ADMIN_PASSWORD: "{{ secret.services.paperless.password }}"
          mounts:
            - source: paperless_scanner
              target: /usr/src/paperless/consume
          volumes:
            - "{{ appdata_dir }}/paperless/media:/usr/src/paperless/media"
            - "{{ appdata_dir }}/paperless/data:/usr/src/paperless/data"
            - "{{ appdata_dir }}/paperless/backup:/backup"
    - role: docker/backup_client
      vars:
        backup_namespace: paperless
        env:
          NAMESPACE: "{{ backup_namespace }}"
          PRE_COMMAND: /usr/bin/docker exec paperless python3 /usr/src/paperless/src/manage.py document_exporter /backup/
        volumes:
          - /usr/bin/docker:/usr/bin/docker
          - /var/run/docker.sock:/var/run/docker.sock
          - "{{ appdata_dir }}/paperless/backup:/backup/paperless"

    ### Photoprism ###
    - role: docker/volume
      vars:
        volume:
          name: pictures
          container: photoprism
          driver: cifs
          mount_options: gid=100,uid=99,file_mode=0777,dir_mode=0777
    - role: docker/container
      vars:
        container:
          name: photoprism-db
          repository: mariadb
          tag: "10"
          ip: "{{ secret.services.photoprism.db.ip }}"
          env:
            MYSQL_ROOT_PASSWORD: "{{ secret.services.photoprism.db.root_password }}"
            MYSQL_DATABASE: "{{ secret.services.photoprism.db.database }}"
            MYSQL_USER: "{{ secret.services.photoprism.db.user }}"
            MYSQL_PASSWORD: "{{ secret.services.photoprism.db.password }}"
          volumes:
            - "{{ appdata_dir }}/photoprism/database:/var/lib/mysql"
    - role: docker/volume
      vars:
        volume:
          name: pictures
          container: photoprism-readonly
          driver: cifs
          mount_options: gid=100,uid=99,file_mode=0777,dir_mode=0777,ro
    - role: docker/container
      vars:
        container:
          name: photoprism-readonly
          repository: photoprism/photoprism
          tag: latest
          ip: "{{ secret.services.photoprism.readonly_ip }}"
          env:
            PHOTOPRISM_UPLOAD_NSFW: "{{ secret.services.photoprism.allow_nsfw }}"
            PHOTOPRISM_DETECT_NSFW: "{{ secret.services.photoprism.detect_nsfw }}"
            PHOTOPRISM_SITE_TITLE: "{{ secret.services.photoprism.title }}"
            PHOTOPRISM_SITE_CAPTION: "{{ secret.services.photoprism.caption }}"
            PHOTOPRISM_SITE_URL: "{{ secret.services.photoprism.public_site_url }}"
            PHOTOPRISM_ADMIN_PASSWORD: "{{ secret.services.photoprism.admin_password }}"
            PHOTOPRISM_DATABASE_DRIVER: "{{ secret.services.photoprism.db_driver }}"
            PHOTOPRISM_DATABASE_DSN: "{{ secret.services.photoprism.db_ro_dsn }}"
            PHOTOPRISM_AUTO_INDEX: "{{ secret.services.photoprism.auto_index_delay }}"
            PHOTOPRISM_AUTO_IMPORT: "{{ secret.services.photoprism.auto_import_delay }}"
            PHOTOPRISM_READONLY: "true"
            PHOTOPRISM_PUBLIC: "true"
            PHOTOPRISM_DISABLE_SETTINGS: "true"
          mounts:
            - source: photoprism_pictures
              target: /photoprism/originals
          volumes:
            - "{{ appdata_dir }}/photoprism/data:/photoprism/storage"
    - role: docker/container
      vars:
        container:
          name: photoprism
          repository: photoprism/photoprism
          tag: latest
          ip: "{{ secret.services.photoprism.ip }}"
          env:
            PHOTOPRISM_UPLOAD_NSFW: "{{ secret.services.photoprism.allow_nsfw }}"
            PHOTOPRISM_DETECT_NSFW: "{{ secret.services.photoprism.detect_nsfw }}"
            PHOTOPRISM_SITE_TITLE: "{{ secret.services.photoprism.title }}"
            PHOTOPRISM_SITE_CAPTION: "{{ secret.services.photoprism.caption }}"
            PHOTOPRISM_ADMIN_PASSWORD: "{{ secret.services.photoprism.admin_password }}"
            PHOTOPRISM_DATABASE_DRIVER: "{{ secret.services.photoprism.db_driver }}"
            PHOTOPRISM_DATABASE_DSN: "{{ secret.services.photoprism.db_dsn }}"
            PHOTOPRISM_AUTO_INDEX: "{{ secret.services.photoprism.auto_index_delay }}"
            PHOTOPRISM_AUTO_IMPORT: "{{ secret.services.photoprism.auto_import_delay }}"
          mounts:
            - source: photoprism_pictures
              target: /photoprism/originals
          volumes:
            - "{{ appdata_dir }}/photoprism/data:/photoprism/storage"

    ### Photoprism Internal ###
    - role: docker/volume
      vars:
        volume:
          name: pictures-internal
          container: photoprism-internal
          driver: cifs
          mount_options: gid=100,uid=99,file_mode=0777,dir_mode=0777
    - role: docker/container
      vars:
        container:
          name: photoprism-internal-db
          repository: mariadb
          tag: "10"
          ip: "{{ secret.services.photoprism.db.internal_ip }}"
          env:
            MYSQL_ROOT_PASSWORD: "{{ secret.services.photoprism.db.root_password }}"
            MYSQL_DATABASE: "{{ secret.services.photoprism.db.database }}"
            MYSQL_USER: "{{ secret.services.photoprism.db.user }}"
            MYSQL_PASSWORD: "{{ secret.services.photoprism.db.password }}"
          volumes:
            - "{{ appdata_dir }}/photoprism-internal/database:/var/lib/mysql"
    - role: docker/container
      vars:
        container:
          name: photoprism-internal
          repository: photoprism/photoprism
          tag: latest
          ip: "{{ secret.services.photoprism.internal_ip }}"
          env:
            PHOTOPRISM_UPLOAD_NSFW: "{{ secret.services.photoprism.allow_nsfw }}"
            PHOTOPRISM_DETECT_NSFW: "{{ secret.services.photoprism.detect_nsfw }}"
            PHOTOPRISM_SITE_TITLE: "{{ secret.services.photoprism.title }}"
            PHOTOPRISM_SITE_CAPTION: "{{ secret.services.photoprism.caption }}"
            PHOTOPRISM_ADMIN_PASSWORD: "{{ secret.services.photoprism.admin_password }}"
            PHOTOPRISM_DATABASE_DRIVER: "{{ secret.services.photoprism.db_driver }}"
            PHOTOPRISM_DATABASE_DSN: "{{ secret.services.photoprism.internal_db_dsn }}"
            PHOTOPRISM_AUTO_INDEX: "{{ secret.services.photoprism.auto_index_delay }}"
            PHOTOPRISM_AUTO_IMPORT: "{{ secret.services.photoprism.auto_import_delay }}"
          mounts:
            - source: photoprism-internal_pictures-internal
              target: /photoprism/originals
          volumes:
            - "{{ appdata_dir }}/photoprism-internal/data:/photoprism/storage"
    - role: docker/container
      vars:
        container: 
          name: backup-photoprism-internal
          repository: ghcr.io/fred-drake/k8s-backup
          tag: "0.3"
          env:
            AWS_ACCESS_KEY_ID: "{{ secret.backup.keyId }}"
            AWS_SECRET_ACCESS_KEY: "{{ secret.backup.keySecret }}"
            RESTIC_REPOSITORY: "s3:http://minio-backup-app.{{ secret.domain }}:9000/restic"
            RESTIC_PASSWORD: "{{ secret.backup.restic.password }}"
            NAMESPACE: photoprism-internal
            BACKUP_TYPES: mysql
            MYSQL_HOST: "{{ secret.services.photoprism.db.internal_ip }}"
            MYSQL_DATABASE: "{{ secret.services.photoprism.db.database }}"
            MYSQL_USER: "{{ secret.services.photoprism.db.user }}"
            MYSQL_PASSWORD: "{{ secret.services.photoprism.db.password }}"
            MYSQL_BACKUP_FILE: "photoprism-internal.sql"
          volumes:
            - "{{ appdata_dir }}/photoprism-internal/data:/backup/photoprism-internal/data"

- hosts: brynn-desktop-2
  gather_facts: false
  become: true
  roles:
    - role: docker/container
      vars:
        container:
          name: testing
          repository: testing
          tag: latest
          pull_policy: false
          runtime: nvidia
          device_requests:
            - device_ids: 0
              driver: nvidia
              capabilities:
                - gpu
                - computer
                - utility
          network: bridge
          volumes:
            - /home/fdrake/wordle_rl/model:/app/model
            - /home/fdrake/code/wordle-rl/config.yaml:/app/config.yaml
            - /home/fdrake/wordle_rl/tensorboard_logs:/app/logs
    - role: docker/container
      vars:
        container:
          name: tensorboard
          repository: ghcr.io/fred-drake/tensorboard-viewer
          tag: latest
          pull_policy: true
          network: bridge
          ports:
            - "6006:6006"
          volumes:
            - /home/fdrake/wordle_rl/tensorboard_logs:/logs
    - role: docker/container
      vars:
        container:
          name: dozzle
          repository: amir20/dozzle
          tag: latest
          network: bridge
          volumes:
            - /var/run/docker.sock:/var/run/docker.sock
          ports:
            - "8888:8080"
    - role: docker/container
      vars:
        container:
          name: coverage
          repository: nginx
          tag: latest
          network: bridge
          volumes:
            - /home/fdrake/code/wordle-rl/htmlcov:/usr/share/nginx/html
          ports:
            - "8080:80"